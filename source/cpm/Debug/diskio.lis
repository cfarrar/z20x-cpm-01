    1 C	/*-----------------------------------------------------------------------*/
    2 C	/* Low level disk I/O module for MakerLisp Machine port of FatFs         */
    3 C	/*-----------------------------------------------------------------------*/
    4 C	
    5  	#include <ez80.h>
    6  	#include <string.h>
    7  	
    8 C	//#include "time.h"
    9  	#include "sdcard.h"
   10  	#include "diskio.h"   /* FatFs lower layer API */
   11  	
   12 C	/* Sector size */
   13  	#define SECTSIZ 512
   14  	
   15 C	/* Drive status */
   16  	static DSTATUS dstat = STA_NOINIT;
MacExp: static DSTATUS dstat = 0x01;
   17  	
   18 C	/*-----------------------------------------------------------------------*/
   19 C	/* Get Drive Status                                                      */
   20 C	/*-----------------------------------------------------------------------*/
   21 C	
   22  	DSTATUS disk_status (
   23  	    BYTE pdrv         /* Physical drive number to identify the drive */
   24  	)
   25  	{
   26  	    BYTE buf[SECTSIZ];
MacExp:     BYTE buf[512];
   27  	
   28  	    if (pdrv) {
   29  	        return RES_PARERR;
   30  	    }
   31  	
   32 C	    /* If two seconds elapsed since last access, maybe card has changed */
   33  	    if (!dstat) {
   34  	        if (!(TMR0_CTL & 0x01)) {
MacExp:         if (!((*(volatile unsigned char __INTIO *)0x80) & 0x01)) {
   35  	
   36 C	            /* Card is out or just inserted and isn't initialized yet */
   37  	            if (read_sdcard(buf, 0, 1)) {
   38  	                dstat = STA_NOINIT;
MacExp:                 dstat = 0x01;
   39  	            } else {
   40 C	                /* Still in - restart two second countdown timer */
   41  	                TMR0_CTL = 0x23;
MacExp:                 (*(volatile unsigned char __INTIO *)0x80) = 0x23;
   42  	            }
   43  	        }
   44  	    }
   45  	
   46  	    return dstat;
   47  	}
   48  	
   49 C	/*-----------------------------------------------------------------------*/
   50 C	/* Initialize a Drive                                                    */
   51 C	/*-----------------------------------------------------------------------*/
   52 C	
   53  	DSTATUS disk_initialize (
   54  	    BYTE pdrv         /* Physical drive number to identify the drive */
   55  	)
   56  	{
   57  	    if (pdrv) {
   58  	        return RES_PARERR;
   59  	    }
   60  	
   61 C	    /* Initialize SD card */
   62  	    if (init_sdcard()) {
   63  	        dstat = STA_NOINIT;
MacExp:         dstat = 0x01;
   64  	    } else {
   65 C	        /* Start two second count down timer */
   66  	        dstat = 0;
   67  	        TMR0_CTL = 0x23;
MacExp:         (*(volatile unsigned char __INTIO *)0x80) = 0x23;
   68  	    }
   69  	
   70  	    return dstat;
   71  	}
   72  	
   73 C	/*-----------------------------------------------------------------------*/
   74 C	/* Read Sector(s)                                                        */
   75 C	/*-----------------------------------------------------------------------*/
   76 C	
   77  	DRESULT disk_read (
   78  	    BYTE pdrv,        /* Physical drive number to identify the drive */
   79  	    BYTE *buff,       /* Data buffer to store read data */
   80  	    DWORD sector,     /* Start sector in LBA */
   81  	    UINT count        /* Number of sectors to read */
   82  	)
   83  	{
   84  	    if (pdrv) {
   85  	        return RES_PARERR;
   86  	    }
   87  	
   88  	    if (dstat == STA_NOINIT) {
MacExp:     if (dstat == 0x01) {
   89  	        return RES_NOTRDY;
   90  	    }
   91  	
   92  	    if (read_sdcard(buff, sector, count)) {
   93  	        return RES_ERROR;
   94  	    }
   95  	
   96 C	    /* Restart two second countdown timer */
   97  	    TMR0_CTL = 0x23;
MacExp:     (*(volatile unsigned char __INTIO *)0x80) = 0x23;
   98  	
   99  	    return RES_OK;
  100  	}
  101  	
  102 C	/*-----------------------------------------------------------------------*/
  103 C	/* Write Sector(s)                                                       */
  104 C	/*-----------------------------------------------------------------------*/
  105 C	
  106  	DRESULT disk_write (
  107  	    BYTE pdrv,        /* Physical drive number to identify the drive */
  108  	    const BYTE *buff, /* Data to be written */
  109  	    DWORD sector,     /* Start sector in LBA */
  110  	    UINT count        /* Number of sectors to write */
  111  	)
  112  	{
  113  	    BYTE *b;
  114  	    UINT i;
  115  	    DWORD s;
  116  	
  117  	    if (pdrv) {
  118  	        return RES_PARERR;
  119  	    }
  120  	
  121  	    if (dstat == STA_NOINIT) {
MacExp:     if (dstat == 0x01) {
  122  	        return RES_NOTRDY;
  123  	    }
  124  	
  125  	    b = buff;
  126  	    s = sector;
  127  	    i = 0;
  128  	    while (i < count) {
  129  	        if (write_sdcard(b, s)) {
  130  	            return RES_ERROR;
  131  	        }
  132  	        b += SECTSIZ;
MacExp:         b += 512;
  133  	        ++s;
  134  	        ++i;
  135  	    }
  136  	
  137 C	    /* Restart two second countdown timer */
  138  	    TMR0_CTL = 0x23;
MacExp:     (*(volatile unsigned char __INTIO *)0x80) = 0x23;
  139  	
  140  	    return RES_OK;
  141  	}
  142  	
  143 C	/*-----------------------------------------------------------------------*/
  144 C	/* Miscellaneous Functions                                               */
  145 C	/*-----------------------------------------------------------------------*/
  146 C	
  147  	DRESULT disk_ioctl (
  148  	    BYTE pdrv,        /* Physical drive number (0..) */
  149  	    BYTE cmd,         /* Control code */
  150  	    void *buff        /* Buffer to send/receive control data */
  151  	)
  152  	{
  153  	    switch (cmd) {
  154  	        case CTRL_SYNC :
MacExp:         case 0 :
  155  	            return RES_OK;
  156  	        default :
  157  	            return RES_PARERR;
  158  	    }
  159  	}
  160  	
  161 C	/* FAT filesystem time */
  162  	static DWORD bcd2bin(UINT8 bcdn)
  163  	{
  164  	    return (((DWORD)bcdn & 0xF0) >> 4)*10 + ((DWORD)bcdn & 0x0F);
  165  	}
  166  	DWORD get_fattime()
  167  	{
  168  	    UINT8 *t;
  169  	    DWORD fattime, year, month, dom, hour, minute, second2;
  170  	
  171 C	    /* Grab the time */
  172  	    t = get_time();
  173  	
  174 C	    /* Put in FAT fs format */
  175  	    year = bcd2bin(t[6])*100 + bcd2bin(t[5]) - 1980;
  176  	    month = bcd2bin(t[4]);
  177  	    dom = bcd2bin(t[3]);
  178  	    hour = bcd2bin(t[2]);
  179  	    minute = bcd2bin(t[1]);
  180  	    second2 = bcd2bin(t[0]) / 2;
  181  	
  182  	    fattime = (year << 25) | (month << 21) | (dom << 16) | \
  183  	        (hour << 11) | (minute << 5) | second2;
  184  	
  185  	    return fattime;
  186  	}
  187  	
  188 C	/* Force recognition of medium change */
  189  	void disk_change()
  190  	{
  191  	    dstat = STA_NOINIT;
MacExp:     dstat = 0x01;
  192  	}
  193  	
