; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\cpmdispatch.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",10
.DEFINE "uartMode"
.VALUE 0
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "baudRate"
.VALUE 1
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "dataBits"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stopBits"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "parity"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fifoTriggerLevel"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "hwFlowControl"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "swFlowControl"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",9
.DEFINE "pBuffer"
.VALUE 0
.CLASS 8
.TYPE 44
.ENDEF
.DEFINE "next_in"
.VALUE 3
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "next_out"
.VALUE 5
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "size"
.VALUE 7
.CLASS 8
.TYPE 13
.ENDEF
.ENDREC "NONAME1"
	SEGMENT TEXT
_biosDispatchTable:
	DW24	_cpmLoadCcpBdos
	DW24	_cpmConsoleCharInReady
	DW24	_cpmConsoleCharIn
	DW24	_cpmConsoleCharOutReady
	DW24	_cpmConsoleCharOut
	DW24	_cpmConsoleStringOut
	DW24	_cpmListCharOutReady
	DW24	_cpmListCharOut
	DW24	_cpmPunchCharOutReady
	DW24	_cpmPunchCharOut
	DW24	_cpmReaderCharInReady
	DW24	_cpmReaderCharIn
	DW24	_cpmSelectDisk
	DW24	_cpmHomeHead
	DW24	_cpmSetTrack
	DW24	_cpmSetSector
	DW24	_cpmSetDma
	DW24	_cpmReadSector
	DW24	_cpmWriteSector
	DW24	_cpmTranslateSector
	DW24	_cpmSetRamBase
.DEFINE "biosDispatchTable"
.ALIAS "_biosDispatchTable"
.CLASS 84
.VALUE _biosDispatchTable
.DIM 21
.TYPE 4449
.ENDEF
;    1	//------------------------------------------------------------------------
;    2	// Copyright (c) 2019, Christopher D. Farrar
;    3	//------------------------------------------------------------------------
;    4	//#define DEBUG
;    5	//------------------------------------------------------------------------
;    6	// I here grant permission to any and all to copy and use this software for
;    7	// any purpose as long as my copyright message is retained.
;    8	//------------------------------------------------------------------------
;    9	#include <defines.h>
;   10	//------------------------------------------------------------------------
;   11	#include "cpmdispatch.h"
;   12	#include "cpmregisters.h"
;   13	//------------------------------------------------------------------------
;   14	// files containing bios functions to dispatch to...
;   15	//------------------------------------------------------------------------
;   16	#include "cpmload.h"
;   17	#include "cpmchario.h"
;   18	#include "cpmdiskio.h"
;   19	#include "cpmtable.h"
;   20	//------------------------------------------------------------------------
;   21	#ifdef DEBUG
;   22	#include <stdio.h>
;   23	#include "stringio.h"
;   24	#endif
;   25	//------------------------------------------------------------------------
;   26	#ifdef DEBUG
;   27	static char debugOutput[255];
;   28	#endif
;   29	//------------------------------------------------------------------------
;   30	typedef void (*functionP) (void);
;   31	//------------------------------------------------------------------------
;   32	// biosDispatchTable - contains pointers to bios functions
;   33	//------------------------------------------------------------------------
;   34	static functionP const biosDispatchTable[] =
;   35	{
	SEGMENT CODE
;   36	    cpmLoadCcpBdos          // reloads ccp and bdos for bios warm boot
;   37	
;   38	  , cpmConsoleCharInReady
;   39	  , cpmConsoleCharIn
;   40	  , cpmConsoleCharOutReady
;   41	  , cpmConsoleCharOut
;   42	  , cpmConsoleStringOut
;   43	  , cpmListCharOutReady
;   44	  , cpmListCharOut
;   45	  , cpmPunchCharOutReady
;   46	  , cpmPunchCharOut
;   47	  , cpmReaderCharInReady
;   48	  , cpmReaderCharIn
;   49	  , cpmSelectDisk
;   50	  , cpmHomeHead
;   51	  , cpmSetTrack
;   52	  , cpmSetSector
;   53	  , cpmSetDma
;   54	  , cpmReadSector
;   55	  , cpmWriteSector
;   56	  , cpmTranslateSector
;   57	  , cpmSetRamBase        // load disk tables into ram at supplied addr
;   58	};
;   59	//------------------------------------------------------------------------
;   60	// adl_biosDispatch - this function dispatches bios calls
;   61	//------------------------------------------------------------------------
;   62	void adl_biosDispatch( void )
;   63	{
_adl_biosDispatch:
.DEFINE "_adl_biosDispatch"

.VALUE _adl_biosDispatch

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "adl_biosDispatch",63,"_adl_biosDispatch"

.LINE 63

.DEFINE "vector"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
;   64	    UINT8 vector = hlregister & 0xFF;
.LINE 64

	LD	A,(_hlregister)
	LD	(IX+%FFFFFFFF),A
;   65	
;   66	    biosDispatchTable[vector]();
.LINE 66

	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_biosDispatchTable
	ADD	HL,BC
	LD	IY,(HL)
	CALL	__indcall
;   67	}
.LINE 67

	LD	SP,IX
	POP	IX
	RET	


;**************************** _adl_biosDispatch ***************************
;Name                         Addr/Register   Size   Type
;_biosDispatchTable                  STATIC     63   variable
;_hlregister                         IMPORT      3   variable
;vector                                IX-1      1   variable


; Stack Frame Size: 7 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "adl_biosDispatch",67,"_adl_biosDispatch"
	XREF _cpmSetRamBase:ROM
	XREF _cpmTranslateSector:ROM
	XREF _cpmWriteSector:ROM
	XREF _cpmReadSector:ROM
	XREF _cpmSetDma:ROM
	XREF _cpmSetSector:ROM
	XREF _cpmSetTrack:ROM
	XREF _cpmHomeHead:ROM
	XREF _cpmSelectDisk:ROM
	XREF _cpmPunchCharOut:ROM
	XREF _cpmPunchCharOutReady:ROM
	XREF _cpmReaderCharIn:ROM
	XREF _cpmReaderCharInReady:ROM
	XREF _cpmListCharOut:ROM
	XREF _cpmListCharOutReady:ROM
	XREF _cpmConsoleStringOut:ROM
	XREF _cpmConsoleCharOut:ROM
	XREF _cpmConsoleCharOutReady:ROM
	XREF _cpmConsoleCharIn:ROM
	XREF _cpmConsoleCharInReady:ROM
	XREF _cpmLoadCcpBdos:ROM
	XREF _hlregister:ROM
	XREF __indcall:ROM
	XDEF _adl_biosDispatch
	END
