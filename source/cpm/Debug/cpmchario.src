; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\cpmchario.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",10
.DEFINE "uartMode"
.VALUE 0
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "baudRate"
.VALUE 1
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "dataBits"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stopBits"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "parity"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fifoTriggerLevel"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "hwFlowControl"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "swFlowControl"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",9
.DEFINE "pBuffer"
.VALUE 0
.CLASS 8
.TYPE 44
.ENDEF
.DEFINE "next_in"
.VALUE 3
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "next_out"
.VALUE 5
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "size"
.VALUE 7
.CLASS 8
.TYPE 13
.ENDEF
.ENDREC "NONAME1"
;    1	//------------------------------------------------------------------------
;    2	// Copyright (c) 2018, Christopher D. Farrar
;    3	//------------------------------------------------------------------------
;    4	// I here grant permission to any and all to copy and use this software for
;    5	// any purpose as long as my copyright message is retained.
;    6	//----------------------------------------------------------------------------
;    7	#include <defines.h>
;    8	//------------------------------------------------------------------------
;    9	#include "chario.h"
;   10	#include "cpmchario.h"
;   11	#include "cpmregisters.h"
;   12	#include "stringio.h"
;   13	//------------------------------------------------------------------------
;   14	void cpmConsoleCharInReady( void )
;   15	{
_cpmConsoleCharInReady:
.DEFINE "_cpmConsoleCharInReady"

.VALUE _cpmConsoleCharInReady

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "cpmConsoleCharInReady",15,"_cpmConsoleCharInReady"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   16	    afregister = consoleCharInReady() << 8;
.LINE 16

	CALL	_consoleCharInReady
	UEXT	HL
	LD	L,A
	PUSH	HL
	UEXT	HL
	PUSH	HL
	INC	SP
	INC	SP
	POP	HL
	INC	SP
	LD	(_afregister),HL
;   17	}
.LINE 17

	LD	SP,IX
	POP	IX
	RET	


;**************************** _cpmConsoleCharInReady ***************************
;Name                         Addr/Register   Size   Type
;_afregister                         IMPORT      3   variable
;_consoleCharInReady                 IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "cpmConsoleCharInReady",17,"_cpmConsoleCharInReady"
;   18	//------------------------------------------------------------------------
;   19	void cpmConsoleCharIn( void )
;   20	{
_cpmConsoleCharIn:
.DEFINE "_cpmConsoleCharIn"

.VALUE _cpmConsoleCharIn

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "cpmConsoleCharIn",20,"_cpmConsoleCharIn"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   21	    afregister = consoleCharIn() << 8;
.LINE 21

	CALL	_consoleCharIn
	LD	B,A
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	HL
	UEXT	HL
	PUSH	HL
	INC	SP
	INC	SP
	POP	HL
	INC	SP
	LD	(_afregister),HL
;   22	}
.LINE 22

	LD	SP,IX
	POP	IX
	RET	


;**************************** _cpmConsoleCharIn ***************************
;Name                         Addr/Register   Size   Type
;_afregister                         IMPORT      3   variable
;_consoleCharIn                      IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "cpmConsoleCharIn",22,"_cpmConsoleCharIn"
;   23	//------------------------------------------------------------------------
;   24	void cpmConsoleCharOutReady( void )
;   25	{
_cpmConsoleCharOutReady:
.DEFINE "_cpmConsoleCharOutReady"

.VALUE _cpmConsoleCharOutReady

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "cpmConsoleCharOutReady",25,"_cpmConsoleCharOutReady"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   26	    afregister = consoleCharOutReady() << 8;
.LINE 26

	CALL	_consoleCharOutReady
	UEXT	HL
	LD	L,A
	PUSH	HL
	UEXT	HL
	PUSH	HL
	INC	SP
	INC	SP
	POP	HL
	INC	SP
	LD	(_afregister),HL
;   27	}
.LINE 27

	LD	SP,IX
	POP	IX
	RET	


;**************************** _cpmConsoleCharOutReady ***************************
;Name                         Addr/Register   Size   Type
;_afregister                         IMPORT      3   variable
;_consoleCharOutReady                IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "cpmConsoleCharOutReady",27,"_cpmConsoleCharOutReady"
;   28	//------------------------------------------------------------------------
;   29	void cpmConsoleCharOut( void )
;   30	{
_cpmConsoleCharOut:
.DEFINE "_cpmConsoleCharOut"

.VALUE _cpmConsoleCharOut

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "cpmConsoleCharOut",30,"_cpmConsoleCharOut"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   31	    consoleCharOut( bcregister );
.LINE 31

	LD	A,(_bcregister)
	LD	C,A
	LD	B,%0
	PUSH	BC
	CALL	_consoleCharOut
	POP	BC
;   32	}
.LINE 32

	LD	SP,IX
	POP	IX
	RET	


;**************************** _cpmConsoleCharOut ***************************
;Name                         Addr/Register   Size   Type
;_bcregister                         IMPORT      3   variable
;_consoleCharOut                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "cpmConsoleCharOut",32,"_cpmConsoleCharOut"
;   33	//------------------------------------------------------------------------
;   34	void cpmConsoleStringOut( void )
;   35	{
_cpmConsoleStringOut:
.DEFINE "_cpmConsoleStringOut"

.VALUE _cpmConsoleStringOut

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "cpmConsoleStringOut",35,"_cpmConsoleStringOut"

.LINE 35

.DEFINE "stringP"

.CLASS 65

.VALUE -3

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;   36	    UINT24 stringP;
;   37	
;   38	    stringP = (UINT24) ( mbregister & 0xFF );
.LINE 38

	LD	A,(_mbregister)
	UEXT	HL
	LD	L,A
	LD	(IX+%FFFFFFFD),HL
;   39	    stringP <<= 16;
.LINE 39

	PUSH	HL
	UEXT	HL
	PUSH	HL
	INC	SP
	POP	HL
	INC	SP
	INC	SP
	LD	(IX+%FFFFFFFD),HL
;   40	    stringP += (UINT24) ( bcregister & 0xFFFF );
.LINE 40

	LD	BC,(_bcregister)
	CALL	__stoiu
	LD	BC,(IX+%FFFFFFFD)
	ADD	HL,BC
	LD	(IX+%FFFFFFFD),HL
;   41	
;   42	    consoleStringOut( (char *) stringP );
.LINE 42

	LD	BC,HL
	PUSH	BC
	CALL	_consoleStringOut
	POP	BC
;   43	}
.LINE 43

	LD	SP,IX
	POP	IX
	RET	


;**************************** _cpmConsoleStringOut ***************************
;Name                         Addr/Register   Size   Type
;_consoleStringOut                   IMPORT  -----   function
;_bcregister                         IMPORT      3   variable
;_mbregister                         IMPORT      1   variable
;stringP                               IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "cpmConsoleStringOut",43,"_cpmConsoleStringOut"
;   44	//------------------------------------------------------------------------
;   45	void cpmListCharOutReady( void )
;   46	{
_cpmListCharOutReady:
.DEFINE "_cpmListCharOutReady"

.VALUE _cpmListCharOutReady

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "cpmListCharOutReady",46,"_cpmListCharOutReady"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   47	    afregister = 0xFF00;
.LINE 47

	LD	BC,65280
	LD	(_afregister),BC
;   48	}
.LINE 48

	LD	SP,IX
	POP	IX
	RET	


;**************************** _cpmListCharOutReady ***************************
;Name                         Addr/Register   Size   Type
;_afregister                         IMPORT      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "cpmListCharOutReady",48,"_cpmListCharOutReady"
;   49	//------------------------------------------------------------------------
;   50	void cpmListCharOut( void )
;   51	{
_cpmListCharOut:
.DEFINE "_cpmListCharOut"

.VALUE _cpmListCharOut

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "cpmListCharOut",51,"_cpmListCharOut"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   52	}
.LINE 52

	LD	SP,IX
	POP	IX
	RET	


;**************************** _cpmListCharOut ***************************
;Name                         Addr/Register   Size   Type


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "cpmListCharOut",52,"_cpmListCharOut"
;   53	//------------------------------------------------------------------------
;   54	void cpmReaderCharInReady( void )
;   55	{
_cpmReaderCharInReady:
.DEFINE "_cpmReaderCharInReady"

.VALUE _cpmReaderCharInReady

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "cpmReaderCharInReady",55,"_cpmReaderCharInReady"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   56	    afregister = 0xFF00;
.LINE 56

	LD	BC,65280
	LD	(_afregister),BC
;   57	}
.LINE 57

	LD	SP,IX
	POP	IX
	RET	


;**************************** _cpmReaderCharInReady ***************************
;Name                         Addr/Register   Size   Type
;_afregister                         IMPORT      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "cpmReaderCharInReady",57,"_cpmReaderCharInReady"
;   58	//------------------------------------------------------------------------
;   59	void cpmReaderCharIn( void )
;   60	{
_cpmReaderCharIn:
.DEFINE "_cpmReaderCharIn"

.VALUE _cpmReaderCharIn

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "cpmReaderCharIn",60,"_cpmReaderCharIn"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   61	    int a;
;   62	
;   63	    /* This routine has been hijacked for an eZ80-space input */
;   64	    a = bcregister;
;   65	    afregister = (*(volatile unsigned char __INTIO *)a) << 8; 
.LINE 65

	LD	BC,(_bcregister)
	IN	A,(BC)
	UEXT	HL
	LD	L,A
	PUSH	HL
	UEXT	HL
	PUSH	HL
	INC	SP
	INC	SP
	POP	HL
	INC	SP
	LD	(_afregister),HL
;   66	}
.LINE 66

	LD	SP,IX
	POP	IX
	RET	


;**************************** _cpmReaderCharIn ***************************
;Name                         Addr/Register   Size   Type
;_afregister                         IMPORT      3   variable
;_bcregister                         IMPORT      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "cpmReaderCharIn",66,"_cpmReaderCharIn"
;   67	//------------------------------------------------------------------------
;   68	void cpmPunchCharOutReady( void )
;   69	{
_cpmPunchCharOutReady:
.DEFINE "_cpmPunchCharOutReady"

.VALUE _cpmPunchCharOutReady

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "cpmPunchCharOutReady",69,"_cpmPunchCharOutReady"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   70	    afregister = 0xFF00;
.LINE 70

	LD	BC,65280
	LD	(_afregister),BC
;   71	}
.LINE 71

	LD	SP,IX
	POP	IX
	RET	


;**************************** _cpmPunchCharOutReady ***************************
;Name                         Addr/Register   Size   Type
;_afregister                         IMPORT      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "cpmPunchCharOutReady",71,"_cpmPunchCharOutReady"
;   72	//------------------------------------------------------------------------
;   73	void cpmPunchCharOut( void )
;   74	{
_cpmPunchCharOut:
.DEFINE "_cpmPunchCharOut"

.VALUE _cpmPunchCharOut

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "cpmPunchCharOut",74,"_cpmPunchCharOut"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   75	    int a, d;
;   76	
;   77	    /* This routine has been hijacked for an eZ80-space output */
;   78	    a = bcregister;
;   79	    d = deregister;
;   80	    *(volatile unsigned char __INTIO *)a = d;
.LINE 80

	LD	A,(_deregister)
	LD	BC,(_bcregister)
	OUT	(BC),A
;   81	}
.LINE 81

	LD	SP,IX
	POP	IX
	RET	


;**************************** _cpmPunchCharOut ***************************
;Name                         Addr/Register   Size   Type
;_bcregister                         IMPORT      3   variable
;_deregister                         IMPORT      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "cpmPunchCharOut",81,"_cpmPunchCharOut"
	XREF _consoleStringOut:ROM
	XREF _deregister:ROM
	XREF _bcregister:ROM
	XREF _afregister:ROM
	XREF _mbregister:ROM
	XREF _consoleCharOut:ROM
	XREF _consoleCharOutReady:ROM
	XREF _consoleCharIn:ROM
	XREF _consoleCharInReady:ROM
	XREF __stoiu:ROM
	XDEF _cpmPunchCharOut
	XDEF _cpmPunchCharOutReady
	XDEF _cpmReaderCharIn
	XDEF _cpmReaderCharInReady
	XDEF _cpmListCharOut
	XDEF _cpmListCharOutReady
	XDEF _cpmConsoleStringOut
	XDEF _cpmConsoleCharOut
	XDEF _cpmConsoleCharOutReady
	XDEF _cpmConsoleCharIn
	XDEF _cpmConsoleCharInReady
	END
