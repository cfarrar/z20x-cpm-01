    1 C	//----------------------------------------------------------------------------
    2 C	// Copyright (c) 2019, Christopher D. Farrar
    3 C	//----------------------------------------------------------------------------
    4 C	// I here grant permission to any and all to copy and use this software for
    5 C	// any purpose as long as my copyright message is retained.
    6 C	//----------------------------------------------------------------------------
    7  	#include <defines.h>
    8 C	//----------------------------------------------------------------------------
    9  	#include "cpmtable.h"
   10  	#include "cpmregisters.h"
   11  	#include "sdparams.h"
   12 C	//----------------------------------------------------------------------------
   13  	typedef struct DiskParameterHeaderStruct
   14  	{
   15  	    UINT16  xlt;
   16  	    UINT16  w1;
   17  	    UINT16  w2;
   18  	    UINT16  w3;
   19  	    UINT16  dirbuf;
   20  	    UINT16  dpb;
   21  	    UINT16  csv;
   22  	    UINT16  alv;
   23  	} DiskParameterHeader;
   24 C	//----------------------------------------------------------------------------
   25  	typedef struct DiskParameterBlockStruct
   26  	{
   27  	    UINT16  spt;
   28  	    UINT8   bsh;
   29  	    UINT8   blm;
   30  	    UINT8   exm;
   31  	    UINT16  dsm;
   32  	    UINT16  drm;
   33  	    UINT8   al0;
   34  	    UINT8   al1;
   35  	    UINT16  cks;
   36  	    UINT16  off;
   37  	} DiskParameterBlock;
   38 C	//----------------------------------------------------------------------------
   39  	static unsigned char *nextByte_;
   40  	static DiskParameterHeader *dphP[SD_CARD_DISKS];
MacExp: static DiskParameterHeader *dphP[(8)];
   41  	static DiskParameterBlock  *dpbsdP;
   42  	static unsigned char *dirbufP;
   43  	static unsigned char *allP[SD_CARD_DISKS];
MacExp: static unsigned char *allP[(8)];
   44 C	//----------------------------------------------------------------------------
   45  	UINT16 getDphP( UINT8 disk )
   46  	{
   47  	    if ( disk < SD_CARD_DISKS )
MacExp:     if ( disk < (8) )
   48  	    {
   49  	        return (UINT16) dphP[disk];
   50  	    }
   51  	    return 0x0000;
   52  	}
   53 C	//----------------------------------------------------------------------------
   54  	void cpmSetRamBase( void )
   55  	{
   56  	    UINT8 disk;
   57  	    UINT24 addr = (UINT24) ( mbregister & 0xFF );
   58  	    addr <<= 16;
   59  	    addr += (UINT24) ( bcregister & 0xFFFF );
   60  	
   61 C	    // beginning of allocatable ram space above bios
   62  	    nextByte_ = (unsigned char *) addr;
   63  	
   64 C	    // disk parameter blocks
   65  	    for ( disk = 0; disk < SD_CARD_DISKS; ++disk )
MacExp:     for ( disk = 0; disk < (8); ++disk )
   66  	    {
   67  	        dphP[disk] = (DiskParameterHeader *) nextByte_;
   68  	        nextByte_ += sizeof (DiskParameterHeader);
   69  	    }
   70  	
   71 C	    // allocation vector tables
   72  	    for ( disk = 0; disk < SD_CARD_DISKS; ++disk )
MacExp:     for ( disk = 0; disk < (8); ++disk )
   73  	    {
   74  	        allP[disk] = nextByte_;
   75  	        nextByte_ += SD_ALLCATION_VECTOR_SIZE;
MacExp:         nextByte_ += ((((2048) - 1)/8)+1);
   76  	    }
   77  	
   78 C	    // allocate space for and build disk
   79 C	    // disk parameter block for sd card hard drive images
   80  	    dpbsdP = (DiskParameterBlock *) nextByte_;
   81  	    nextByte_ += sizeof (DiskParameterBlock);
   82  	    dirbufP = nextByte_;
   83  	    nextByte_ += LOGICAL_SECTOR_SIZE;
MacExp:     nextByte_ += (128);
   84  	
   85 C	    // initiate the sd card disk parameter block
   86  	    dpbsdP->spt = SD_SECTORS_PER_TRACK;     // 1024
MacExp:     dpbsdP->spt = (1024);     // 1024
   87  	    dpbsdP->bsh = SD_BLOCK_SHIFT_FACTOR;    // 5;
MacExp:     dpbsdP->bsh = (5);    // 5;
   88  	    dpbsdP->blm = SD_BLOCK_MASK;            // 31;
MacExp:     dpbsdP->blm = (31);            // 31;
   89  	    dpbsdP->exm = SD_EXTENT_MASK;           // 1;
MacExp:     dpbsdP->exm = (1);           // 1;
   90  	    dpbsdP->dsm = SD_DISK_BLOCKS - 1;       // 2047;
MacExp:     dpbsdP->dsm = (2048) - 1;       // 2047;
   91  	    dpbsdP->drm = SD_DIRECTORY_ENTRIES - 1; // 511;
MacExp:     dpbsdP->drm = (512) - 1; // 511;
   92  	    dpbsdP->al0 = SD_ALLOCATION_BITMAP_0;   // 0xf0;
MacExp:     dpbsdP->al0 = (0xf0);   // 0xf0;
   93  	    dpbsdP->al1 = SD_ALLOCATION_BITMAP_1;   // 0x00;
MacExp:     dpbsdP->al1 = (0x00);   // 0x00;
   94  	    dpbsdP->cks = SD_CHECKSUM_VECTOR_SIZE;  // 0;
MacExp:     dpbsdP->cks = (0);  // 0;
   95  	    dpbsdP->off = SD_TRACK_OFFSET;          // 1;
MacExp:     dpbsdP->off = (1);          // 1;
   96  	
   97 C	    // initiate the disk parameter headers
   98  	    for ( disk = 0; disk < SD_CARD_DISKS; ++disk )
MacExp:     for ( disk = 0; disk < (8); ++disk )
   99  	    {
  100  	        dphP[disk]->xlt = 0;
  101  	        dphP[disk]->w1 = 0;
  102  	        dphP[disk]->w2 = 0;
  103  	        dphP[disk]->w3 = 0;
  104  	        dphP[disk]->dirbuf = (UINT16) ( dirbufP );
  105  	        dphP[disk]->dpb = (UINT16) ( dpbsdP );
  106  	        dphP[disk]->csv = 0;
  107  	        dphP[disk]->alv = (UINT16) ( allP[disk] );
  108  	    }
  109  	}
  110 C	//----------------------------------------------------------------------------
