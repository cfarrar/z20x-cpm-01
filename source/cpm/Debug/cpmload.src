; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\cpmload.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",4
.DEFINE "dr"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "ddr"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "alt1"
.VALUE 2
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "alt2"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",10
.DEFINE "uartMode"
.VALUE 0
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "baudRate"
.VALUE 1
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "dataBits"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stopBits"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "parity"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fifoTriggerLevel"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "hwFlowControl"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "swFlowControl"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME1"
.BEGREC "NONAME2",9
.DEFINE "pBuffer"
.VALUE 0
.CLASS 8
.TYPE 44
.ENDEF
.DEFINE "next_in"
.VALUE 3
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "next_out"
.VALUE 5
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "size"
.VALUE 7
.CLASS 8
.TYPE 13
.ENDEF
.ENDREC "NONAME2"
	SEGMENT BSS
	ALIGN 65536
_cpmRam:
	DS	65536
.DEFINE "cpmRam"
.ALIAS "_cpmRam"
.CLASS 83
.VALUE _cpmRam
.TYPE 0
.ENDEF
;    1	//------------------------------------------------------------------------
;    2	// Copyright (c) 2019, Christopher D. Farrar
;    3	//------------------------------------------------------------------------
;    4	// I here grant permission to any and all to copy and use this software for
;    5	// any purpose as long as my copyright message is retained.
;    6	//----------------------------------------------------------------------------
;    7	#include <defines.h>
;    8	#include <ez80.h>
;    9	#include <string.h>
;   10	//------------------------------------------------------------------------
;   11	#include "cpmload.h"
;   12	#include "cpmregisters.h"
;   13	#include "disks.h"
;   14	#include "isrwrap.h"
;   15	#include "middle.h"
;   16	//------------------------------------------------------------------------
;   17	// Following allows emulation of a cp/m system ram that is smaller
;   18	// than 64k although why?  The alignment however, must always be 64k
;   19	// That is why two seperate constants are used.
;   20	//------------------------------------------------------------------------
;   21	UINT8 cpmRam[CPM_RAM_SIZE] _Align( CPM_RAM_ALIGNMENT );
	SEGMENT CODE
;   22	//------------------------------------------------------------------------
;   23	void cpmLoadCcpBdos( void )
;   24	{
_cpmLoadCcpBdos:
.DEFINE "_cpmLoadCcpBdos"

.VALUE _cpmLoadCcpBdos

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "cpmLoadCcpBdos",24,"_cpmLoadCcpBdos"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   25	    memcpy(
;   26	       &cpmRam[CCP]
;   27	      , (char *) CCP
;   28	      , BIOS - CCP );
.LINE 28

	LD	BC,5632
	PUSH	BC
	LD	BC,56320
	PUSH	BC
	LD	HL,_cpmRam
	ADD	HL,BC
	PUSH	HL
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;   29	}
.LINE 29

	LD	SP,IX
	POP	IX
	RET	


;**************************** _cpmLoadCcpBdos ***************************
;Name                         Addr/Register   Size   Type
;_cpmRam                             STATIC  65536   variable
;_memcpy                             IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "cpmLoadCcpBdos",29,"_cpmLoadCcpBdos"
;   30	//------------------------------------------------------------------------
;   31	void loadCcpBdosBios( void )
;   32	{
_loadCcpBdosBios:
.DEFINE "_loadCcpBdosBios"

.VALUE _loadCcpBdosBios

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "loadCcpBdosBios",32,"_loadCcpBdosBios"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   33	    memcpy(
;   34	       &cpmRam[CCP]
;   35	      , (char *) CCP
;   36	      , 0x10000 - CCP );
.LINE 36

	LD	BC,9216
	PUSH	BC
	LD	BC,56320
	PUSH	BC
	LD	HL,_cpmRam
	ADD	HL,BC
	PUSH	HL
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;   37	}
.LINE 37

	LD	SP,IX
	POP	IX
	RET	


;**************************** _loadCcpBdosBios ***************************
;Name                         Addr/Register   Size   Type
;_cpmRam                             STATIC  65536   variable
;_memcpy                             IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "loadCcpBdosBios",37,"_loadCcpBdosBios"
;   38	//------------------------------------------------------------------------
;   39	void loadEntryAndStart( void )
;   40	{
_loadEntryAndStart:
.DEFINE "_loadEntryAndStart"

.VALUE _loadEntryAndStart

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "loadEntryAndStart",40,"_loadEntryAndStart"

;   41	    // make real entities to copy
;   42	    static UINT24 biosEntry = (UINT24) adl_biosEntry;
.LINE 42

.DEFINE "biosEntry"

.ALIAS "_0biosEntry"

.CLASS 69

.VALUE _0biosEntry

.TYPE 14

.ENDEF

;   43	    static UINT16 start = BIOS;
.LINE 43

.DEFINE "start"

.ALIAS "_1start"

.CLASS 69

.VALUE _1start

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   44	
;   45	    // address of middle ware bios services
;   46	    memcpy(
;   47	        &cpmRam[0x0000]
;   48	      , &biosEntry
;   49	      , sizeof biosEntry );
.LINE 49

	LD	BC,3
	PUSH	BC
	LD	BC,_0biosEntry
	PUSH	BC
	LD	BC,_cpmRam
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;   50	
;   51	    // jump instruction
;   52	    cpmRam[0x0100] = 0xC3;
.LINE 52

	LD	BC,256
	LD	HL,_cpmRam
	ADD	HL,BC
	LD	(HL),%C3
;   53	
;   54	    // bios cold boot entry point
;   55	    memcpy(
;   56	        &cpmRam[0x0101]
;   57	      , &start
;   58	      , sizeof start );
.LINE 58

	LD	BC,2
	PUSH	BC
	LD	BC,_1start
	PUSH	BC
	LD	BC,257
	LD	HL,_cpmRam
	ADD	HL,BC
	PUSH	HL
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;   59	}
.LINE 59

	LD	SP,IX
	POP	IX
	RET	


;**************************** _loadEntryAndStart ***************************
;Name                         Addr/Register   Size   Type
;_1start                             STATIC      2   variable
;_cpmRam                             STATIC  65536   variable
;_0biosEntry                         STATIC      3   variable
;_memcpy                             IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "loadEntryAndStart",59,"_loadEntryAndStart"
	SEGMENT DATA
_0biosEntry:
	DW24	_adl_biosEntry
_1start:
	DW	61952
	SEGMENT CODE
;   60	//------------------------------------------------------------------------
;   61	void startCpm( void )
;   62	{
_startCpm:
.DEFINE "_startCpm"

.VALUE _startCpm

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "startCpm",62,"_startCpm"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
;   63	    initCpmDiskio();
.LINE 63

	LD	(IX+%FFFFFFFF),A
	CALL	_initCpmDiskio
	LD	A,(IX+%FFFFFFFF)
;   64	
;   65	    loadCcpBdosBios();
.LINE 65

	LD	(IX+%FFFFFFFF),A
	CALL	_loadCcpBdosBios
	LD	A,(IX+%FFFFFFFF)
;   66	    loadEntryAndStart();
.LINE 66

	LD	(IX+%FFFFFFFF),A
	CALL	_loadEntryAndStart
	LD	A,(IX+%FFFFFFFF)
;   67	
;   68	    /* Wrap UART ISRs */
;   69	    di();
.LINE 69

	di
;   70	    _set_vector( UART0_IVECT, isruart0 );
.LINE 70

	LD	BC,_isruart0
	PUSH	BC
	LD	BC,24
	PUSH	BC
	LD	(IX+%FFFFFFFF),A
	CALL	__set_vector
	LD	A,(IX+%FFFFFFFF)
	POP	BC
	POP	BC
;   71	    _set_vector( UART1_IVECT, isruart1 );
.LINE 71

	LD	BC,_isruart1
	PUSH	BC
	LD	BC,26
	PUSH	BC
	LD	(IX+%FFFFFFFF),A
	CALL	__set_vector
	LD	A,(IX+%FFFFFFFF)
	POP	BC
	POP	BC
;   72	
;   73	    /* Enable interrupts and enter CP/M in mixed mode */
;   74	    mbregister = ( (UINT24) cpmRam ) >> 16;
.LINE 74

	UEXT	HL
	PUSH	HL
	LD	HL,_cpmRam
	PUSH	HL
	INC	SP
	INC	SP
	POP	HL
	INC	SP
	LD	A,L
	LD	(_mbregister),A
;   75	    adl_startCpm();
.LINE 75

	CALL	_adl_startCpm
;   76	}
.LINE 76

	LD	SP,IX
	POP	IX
	RET	


;**************************** _startCpm ***************************
;Name                         Addr/Register   Size   Type
;_adl_startCpm                       IMPORT  -----   function
;_mbregister                         IMPORT      1   variable
;_cpmRam                             STATIC  65536   variable
;_isruart1                           IMPORT  -----   function
;_isruart0                           IMPORT  -----   function
;__set_vector                        IMPORT  -----   function
;_loadEntryAndStart                  IMPORT  -----   function
;_loadCcpBdosBios                    IMPORT  -----   function
;_initCpmDiskio                      IMPORT  -----   function


; Stack Frame Size: 7 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "startCpm",76,"_startCpm"
	XREF _adl_biosEntry:ROM
	XREF _adl_startCpm:ROM
	XREF _isruart1:ROM
	XREF _isruart0:ROM
	XREF _initCpmDiskio:ROM
	XREF _mbregister:ROM
	XREF _memcpy:ROM
	XREF __set_vector:ROM
	XDEF _startCpm
	XDEF _loadEntryAndStart
	XDEF _loadCcpBdosBios
	XDEF _cpmLoadCcpBdos
	XDEF _cpmRam
	END
